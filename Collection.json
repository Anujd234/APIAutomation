{
	"info": {
		"_postman_id": "947330f0-6905-4730-bece-39abe87ae57a",
		"name": "RestAPI_CollectionALL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8333970",
		"_collection_link": "https://red-crater-564569.postman.co/workspace/API-Testing~154b5a3b-c3a1-4d94-a4b3-acc5cb453585/collection/8333970-947330f0-6905-4730-bece-39abe87ae57a?action=share&source=collection_link&creator=8333970"
	},
	"item": [
		{
			"name": "ListUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed SyntaxError by properly closing the Body matches string test and fixing the syntax of the last test\r",
							"pm.test(\"Status code get is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Removed redundant test for verifying status response\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.total_pages).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate JSON Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.per_page).to.eql(6);  \r",
							"});\r",
							"\r",
							"pm.test(\"Validate Tags value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].id).to.eql(1);\r",
							"    pm.expect(jsonData.data[0].email).to.eql(\"george.bluth@reqres.in\");\r",
							"    pm.expect(jsonData.data[1].id).to.eql(2);\r",
							"    pm.expect(jsonData.data[1].email).to.eql(\"janet.weaver@reqres.in\");  \r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(`{\r",
							"    \"page\": 1,\r",
							"    \"per_page\": 6,\r",
							"    \"total\": 12,\r",
							"    \"total_pages\": 2,\r",
							"    \"data\": [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"            \"email\": \"george.bluth@reqres.in\",\r",
							"            \"first_name\": \"George\",\r",
							"            \"last_name\": \"Bluth\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"            \"email\": \"janet.weaver@reqres.in\",\r",
							"            \"first_name\": \"Janet\",\r",
							"            \"last_name\": \"Weaver\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"            \"email\": \"emma.wong@reqres.in\",\r",
							"            \"first_name\": \"Emma\",\r",
							"            \"last_name\": \"Wong\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"            \"email\": \"eve.holt@reqres.in\",\r",
							"            \"first_name\": \"Eve\",\r",
							"            \"last_name\": \"Holt\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"            \"email\": \"charles.morris@reqres.in\",\r",
							"            \"first_name\": \"Charles\",\r",
							"            \"last_name\": \"Morris\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"            \"email\": \"tracey.ramos@reqres.in\",\r",
							"            \"first_name\": \"Tracey\",\r",
							"            \"last_name\": \"Ramos\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\r",
							"        }\r",
							"    ],\r",
							"    \"support\": {\r",
							"        \"url\": \"https://reqres.in/#support-heading\",\r",
							"        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
							"    }\r",
							"}`);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header value\", function () {\r",
							"    pm.expect(pm.response.to.have.header(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users?page={{page}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code post request is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"job\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate JSON Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body('{\"name\": \"morpheus\",\"job\": \"leader\",\"id\": \"478\",\"createdAt\": \"2024-09-06T14:04:40.053Z\"}');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"name\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code put request is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate JSON Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body({\r",
							"        \"name\": \"Kunal\",\r",
							"        \"job\": \"zion resident\",\r",
							"        \"updatedAt\": \"2024-09-06T15:04:51.175Z\"\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name1}}\",\r\n    \"job\": \"{{job1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_UserName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code patch request is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate JSON Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Yogesh Kadu\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body({\r",
							"        \"name\": \"Kunal\",\r",
							"        \"job\": \"zion resident\",\r",
							"        \"updatedAt\": \"2024-09-06T15:04:51.175Z\"\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name2}}\",\r\n    \"job\": \"{{job2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}